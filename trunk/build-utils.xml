<!-- $Id: build-utils.xml,v 1.23 2009/01/27 06:33:55 rregan Exp $ -->
<project name="Build Utilities" default="usage" basedir=".">

    <property name="lib.dir" value="lib"/>
    <property name="build.dir" value="build"/>

    <path id="libs.jaxb">
        <fileset dir="${lib.dir}/jaxb">
            <include name="*.jar"/>
        </fileset>
    	<!-- need jdk tools.jar here -->
    </path>

    <path id="libs.doxygen.ant">
        <fileset dir="${lib.dir}/build/">
            <include name="ant_doxygen.jar"/>
        </fileset>
    </path>

	<target name="usage" description="message on how to use the build-utils.xml file">
		<echo>
			Usage:
				The build-utils.xml file contains common generic tasks that can be called
				from a project specific build.xml file.
				
				The main target is "war". it expects the subproject.name, deployment.name
				and build.dir properties to be set.
		</echo>
	</target>

	<target name="clean" description="removes all generated files for a sub project.">
			<delete dir="${build.dir}/${context.name}"/>
	</target>

	<target name="prepare-war" description="build directories if they do not exist">
		<mkdir dir="${build.dir}/${context.name}/"/>
		<mkdir dir="${build.dir}/${context.name}/war"/>
		<mkdir dir="${build.dir}/${context.name}/war/META-INF"/>
		<mkdir dir="${build.dir}/${context.name}/war/WEB-INF"/>
		<mkdir dir="${build.dir}/${context.name}/war/WEB-INF/classes"/>
		<mkdir dir="${build.dir}/${context.name}/war/WEB-INF/lib"/>
		<mkdir dir="${build.dir}/${context.name}/war/WEB-INF/xslt"/>
		<mkdir dir="${build.dir}/${context.name}/war/WEB-INF/xsd"/>
	</target>

	<target name="compile">
		<echo message="compiling to ${classes.dir}"/>
		<javac srcdir="src/java" destdir="${classes.dir}" debug="true" source="1.6">
			<classpath>
				<fileset dir="lib">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
		</javac>
		<javac srcdir="test/java" destdir="${classes.dir}" debug="true" source="1.6">
			<classpath>
				<fileset dir="lib">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
		</javac>
	</target>

    <target name="config-war" depends="prepare-war" description="Build J2EE war for component ${subproject.name} file ${context.name}.war">
        <antcall target="gen-web-xml">
            <param name="subproject.name" value="${subproject.name}"/>
            <param name="deployment.name" value="${deployment.name}"/>
            <param name="context.name" value="${context.name}"/>
        </antcall>

        <antcall target="gen-persistence-config">
            <param name="subproject.name" value="${subproject.name}"/>
            <param name="deployment.name" value="${deployment.name}"/>
            <param name="context.name" value="${context.name}"/>
        </antcall>
    	
        <antcall target="gen-war-context-xml">
            <param name="subproject.name" value="${subproject.name}"/>
            <param name="deployment.name" value="${deployment.name}"/>
            <param name="context.name" value="${context.name}"/>
        </antcall>

        <antcall target="gen-war-manifest">
            <param name="subproject.name" value="${subproject.name}"/>
            <param name="deployment.name" value="${deployment.name}"/>
            <param name="context.name" value="${context.name}"/>
        </antcall>

        <antcall target="gen-log4j-config">
            <param name="subproject.name" value="${subproject.name}"/>
            <param name="deployment.name" value="${deployment.name}"/>
            <param name="context.name" value="${context.name}"/>
        </antcall>

        <antcall target="gen-db-config">
            <param name="subproject.name" value="${subproject.name}"/>
            <param name="deployment.name" value="${deployment.name}"/>
            <param name="context.name" value="${context.name}"/>
        </antcall>
    </target>

    <target name="war" depends="config-war" description="Build war file ${context.name}.war">
    	<antcall target="compile">
			<param name="subproject.name" value="${subproject.name}"/>
			<param name="deployment.name" value="${deployment.name}"/>
            <param name="context.name" value="${context.name}"/>
			<param name="src.dir" value="src/java"/>
			<param name="classes.dir" value="${build.dir}/${context.name}/war/WEB-INF/classes"/>
		</antcall>
    	
		<copy todir="${build.dir}/${context.name}/war/WEB-INF/lib" flatten="true">
			<fileset dir="lib/">
				<include name="**/*.jar"/>
				<exclude name="build/**/*.jar"/>
				<exclude name="test/**/*.jar"/>
				<exclude name="nlp/**/*.jar"/>
			</fileset>
			<fileset dir="lib/">
				<include name="nlp/stanford-ner.jar"/>
				<include name="nlp/stanford-parser.jar"/>
				<include name="nlp/jazzy-core.jar"/>
				<include name="nlp/maxent-2.4.0.jar"/>
				<include name="nlp/opennlp-tools-1.3.0.jar"/>
				<include name="nlp/trove-2.0.3.jar"/>
			</fileset>
		</copy>

    	<!-- 
    		this makes the data files available through the class loader via
	    	getClass().getClassLoader().getResourceAsStream(fileName)
    	-->
		<copy todir="${build.dir}/${context.name}/war/WEB-INF/classes" description="copy data/properties files bundled with source.">
			<fileset dir="src/java">
				<exclude name="**/*.java"/>
			</fileset>
		</copy>

		<copy todir="${build.dir}/${context.name}/war/WEB-INF/classes" description="copy echo stylesheets.">
			<fileset dir="conf/echo">
				<include name="*.stylesheet"/>
			</fileset>
		</copy>

		<copy todir="${build.dir}/${context.name}/war/WEB-INF" description="copy spring configurations">
			<fileset dir="conf/spring">
				<include name="*.xml"/>
			</fileset>
		</copy>

		<copy todir="${build.dir}/${context.name}/war/WEB-INF/classes/resources" description="copy resources files into class path.">
			<fileset dir="src/resources">
				<include name="**/*"/>
				<exclude name="echo/**/*"/>
				<exclude name="fonts/**/*"/>
				<exclude name="images/**/*"/>
				<exclude name="nlp/**/*"/>
			</fileset>
			<fileset dir="src/resources">
				<include name="images/buttons/button_rbkg_125x32_off.png"/>
				<include name="images/buttons/button_rbkg_125x32_on.png"/>
				<include name="images/buttons/button_rbkg_125x29_on.png"/>
				<include name="images/buttons/transparent_22x22.png"/>
				<include name="images/buttons/tab/**/*.png"/>
				<include name="images/buttons/navtable/**/*.png"/>
				<include name="images/buttons/editor/**/*.png"/>
				<include name="images/logo_fembot_demun_mini.png"/>
				<include name="images/logo_fembot_torso_blue_cutout4.png"/>
				<include name="images/Logo_335x83_demun_lotion.png"/>
				<include name="images/backgrounds/LoginPaneBackground2.png"/>
				<include name="nlp/jazzy/**/*"/>
				<include name="nlp/stanford-ner/**/*"/>
				<include name="nlp/stanford-parser/**/*"/>
				<include name="nlp/dictionary/*"/>
				<include name="nlp/opennlp-tools/EnglishSD.bin.gz"/>
			</fileset>
		</copy>

		<copy todir="${build.dir}/${context.name}/war/doc" file="doc/devdocs.tgz" description="copy dev docs archive to the war." failonerror="false"/>

		<echo message="generating war file: ${build.dir}/${context.name}.war"/>
		<jar destfile="${build.dir}/${context.name}.war"  duplicate="preserve">
			<zipfileset dir="${build.dir}/${context.name}/war"/>
		</jar>
    </target>

    <target name="war-full" depends="config-war" description="Build war file with tests and all NLP tools ${context.name}.war">
    	<antcall target="compile">
			<param name="subproject.name" value="${subproject.name}"/>
			<param name="deployment.name" value="${deployment.name}"/>
            <param name="context.name" value="${context.name}"/>
			<param name="src.dir" value="src/java"/>
			<param name="classes.dir" value="${build.dir}/${context.name}/war/WEB-INF/classes"/>
		</antcall>
    	
		<copy todir="${build.dir}/${context.name}/war/WEB-INF/lib" flatten="true">
			<fileset dir="lib/" >
				<include name="**/*.jar"/>
				<exclude name="build/**/*.jar"/>
			</fileset>
		</copy>

		<antcall target="compile">
			<param name="subproject.name" value="${subproject.name}"/>
			<param name="deployment.name" value="${deployment.name}"/>
            <param name="context.name" value="${context.name}"/>
			<param name="src.dir" value="test/java"/>
			<param name="classes.dir" value="${build.dir}/${context.name}/war/WEB-INF/classes"/>
		</antcall>
    	<!-- 
    		this makes the data files available through the class loader via
	    	getClass().getClassLoader().getResourceAsStream(fileName)
    	-->
		<copy todir="${build.dir}/${context.name}/war/WEB-INF/classes" description="copy data/properties files bundled with source.">
			<fileset dir="src/java">
				<exclude name="**/*.java"/>
			</fileset>
			<fileset dir="test/java">
				<exclude name="**/*.java"/>
			</fileset>
		</copy>

		<copy todir="${build.dir}/${context.name}/war/WEB-INF/classes" description="copy echo stylesheets.">
			<fileset dir="conf/echo">
				<include name="*.stylesheet"/>
			</fileset>
		</copy>

		<copy todir="${build.dir}/${context.name}/war/WEB-INF" description="copy spring configurations">
			<fileset dir="conf/spring">
				<include name="*.xml"/>
			</fileset>
		</copy>

		<copy todir="${build.dir}/${context.name}/war/WEB-INF/classes/resources" description="copy resources files into class path.">
			<fileset dir="src/resources">
				<include name="**/*"/>
			</fileset>
		</copy>

		<copy todir="${build.dir}/${context.name}/war/WEB-INF/classes/resources" description="copy test resources files into class path.">
			<fileset dir="test/resources">
				<include name="**/*"/>
			</fileset>
		</copy>

		<copy todir="${build.dir}/${context.name}/war/doc" file="doc/devdocs.tgz" description="copy dev docs archive to the war." failonerror="false"/>

		<echo message="generating war file: ${build.dir}/${context.name}.war"/>
		<jar destfile="${build.dir}/${context.name}.war"  duplicate="preserve">
			<zipfileset dir="${build.dir}/${context.name}/war"/>
		</jar>
    </target>

	<target name="gen-web-xml">
		<antcall target="filter-file">
			<param name="subproject.name" value="${subproject.name}"/>
			<param name="deployment.name" value="${deployment.name}"/>
            <param name="context.name" value="${context.name}"/>
			<param name="output.file" value="${build.dir}/${context.name}/war/WEB-INF/web.xml"/>
			<param name="source.file" value="conf/web.xml"/>
			<param name="spring.appContext" value="${spring.appContext}"/>
		</antcall>
	</target>

	<target name="gen-war-context-xml">
		<antcall target="filter-file">
			<param name="subproject.name" value="${subproject.name}"/>
			<param name="deployment.name" value="${deployment.name}"/>
            <param name="context.name" value="${context.name}"/>
			<param name="output.file" value="${build.dir}/${context.name}/war/META-INF/context.xml"/>
			<param name="source.file" value="conf/context.xml"/>
		</antcall>
	</target>

	<target name="gen-persistence-config">
		<antcall target="filter-file">
			<param name="subproject.name" value="${subproject.name}"/>
			<param name="deployment.name" value="${deployment.name}"/>
            <param name="context.name" value="${context.name}"/>
			<param name="output.file" value="${build.dir}/${context.name}/war/WEB-INF/classes/META-INF/persistence.xml"/>
			<param name="source.file" value="conf/persistence.xml"/>
		</antcall>
	</target>

	<target name="gen-war-manifest">
		<antcall target="filter-file">
			<param name="subproject.name" value="${subproject.name}"/>
			<param name="deployment.name" value="${deployment.name}"/>
            <param name="context.name" value="${context.name}"/>
			<param name="output.file" value="${build.dir}/${context.name}/war/META-INF/MANIFEST.MF"/>
			<param name="source.file" value="conf/MANIFEST.MF"/>
		</antcall>
	</target>

	<target name="gen-log4j-config">
		<antcall target="filter-file">
			<param name="subproject.name" value="${subproject.name}"/>
			<param name="deployment.name" value="${deployment.name}"/>
            <param name="context.name" value="${context.name}"/>
			<param name="output.file" value="${build.dir}/${context.name}/war/WEB-INF/classes/log4j.properties"/>
			<param name="source.file" value="conf/log4j.properties"/>
		</antcall>
	</target>

	<target name="gen-db-config">
		<antcall target="filter-file">
			<param name="subproject.name" value="${subproject.name}"/>
			<param name="deployment.name" value="${deployment.name}"/>
            <param name="context.name" value="${context.name}"/>
			<param name="output.file" value="${build.dir}/${context.name}/war/WEB-INF/classes/db.properties"/>
			<param name="source.file" value="conf/db.properties"/>
		</antcall>
	</target>

	<target name="filter-file">
		<antcall target="filter-file-personal" inheritall="yes" inheritrefs="yes" />
		<antcall target="filter-file-custom" inheritall="yes" inheritrefs="yes" />
	</target>

	<target name="filter-file-personal" unless="env.properties.file">
        <copy file="${source.file}" tofile="${output.file}" overwrite="true" filtering="true">
            <filterset>
            	<filtersfile file="conf/build/build.properties"/>
            	<filtersfile file="conf/build/deployment-${deployment.name}.build.properties"/>
            	<filtersfile file="conf/build/env-${hostname}-${username}.build.properties" />
				<filter token="subproject.name" value="${subproject.name}"/>
				<filter token="deployment.name" value="${deployment.name}"/>
				<filter token="context.name" value="${context.name}"/>
            </filterset>
		</copy>
	</target>

	<target name="filter-file-custom" if="env.properties.file">
        <copy file="${source.file}" tofile="${output.file}" overwrite="true" filtering="true">
            <filterset>
            	<filtersfile file="conf/build/build.properties"/>
            	<filtersfile file="conf/build/deployment-${deployment.name}.build.properties"/>
            	<filtersfile file="conf/build/${env.properties.file}" />
				<filter token="subproject.name" value="${subproject.name}"/>
				<filter token="deployment.name" value="${deployment.name}"/>
				<filter token="context.name" value="${context.name}"/>
            </filterset>
		</copy>
	</target>
	
	<!-- note: tools.jar must be in the classpath or you'll see
			   a warning: A class needed by class com.sun.tools.jxc.SchemaGenTask
			   cannot be found: com/sun/mirror/apt/AnnotationProcessorFactory -->
	<taskdef name="schemagen" classname="com.sun.tools.jxc.SchemaGenTask">
	  <classpath refid="libs.jaxb"/>
	</taskdef>
	
	<target name="gen-project-xml-schema">
		<schemagen srcdir="src/java" destdir="doc/samples">
			<schema namespace="http://www.people.fas.harvard.edu/~rregan/requel" file="project.xsd" />
			<classpath>
				<fileset dir="lib">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
			<!-- annotation -->
			<include name="edu/harvard/fas/rregan/requel/annotation/ArgumentPositionSupportLevel.java"/>
			<include name="edu/harvard/fas/rregan/requel/annotation/impl/AbstractAnnotation.java"/>
			<include name="edu/harvard/fas/rregan/requel/annotation/impl/ArgumentImpl.java"/>
			<include name="edu/harvard/fas/rregan/requel/annotation/impl/IssueImpl.java"/>
			<include name="edu/harvard/fas/rregan/requel/annotation/impl/LexicalIssue.java"/>
			<include name="edu/harvard/fas/rregan/requel/annotation/impl/NoteImpl.java"/>
			<include name="edu/harvard/fas/rregan/requel/annotation/impl/PositionImpl.java"/>
			<include name="edu/harvard/fas/rregan/requel/annotation/impl/ChangeSpellingPosition.java"/>
			<include name="edu/harvard/fas/rregan/requel/annotation/impl/AddWordToDictionaryPosition.java"/>
			
			<!-- user -->
			<include name="edu/harvard/fas/rregan/requel/user/AbstractUserRole.java"/>
			<include name="edu/harvard/fas/rregan/requel/user/SystemAdminUserRole.java"/>
			<include name="edu/harvard/fas/rregan/requel/user/UserRolePermission.java"/>
			<include name="edu/harvard/fas/rregan/requel/user/impl/OrganizationImpl.java"/>
			<include name="edu/harvard/fas/rregan/requel/user/impl/UserImpl.java"/>
			
			<!-- project -->
			<include name="edu/harvard/fas/rregan/requel/project/DomainAdminUserRole.java"/>
			<include name="edu/harvard/fas/rregan/requel/project/ProjectUserRole.java"/>
			<include name="edu/harvard/fas/rregan/requel/project/impl/AbstractProjectOrDomain.java"/>
			<include name="edu/harvard/fas/rregan/requel/project/impl/AbstractProjectOrDomainEntity.java"/>
			<include name="edu/harvard/fas/rregan/requel/project/impl/AbstractTextEntity.java"/>
			<include name="edu/harvard/fas/rregan/requel/project/impl/ActorImpl.java"/>
			<include name="edu/harvard/fas/rregan/requel/project/impl/GoalImpl.java"/>
			<include name="edu/harvard/fas/rregan/requel/project/impl/StoryImpl.java"/>
			<include name="edu/harvard/fas/rregan/requel/project/impl/StepImpl.java"/>
			<include name="edu/harvard/fas/rregan/requel/project/impl/ScenarioImpl.java"/>
			<include name="edu/harvard/fas/rregan/requel/project/impl/GoalRelationImpl.java"/>
			<include name="edu/harvard/fas/rregan/requel/project/impl/ProjectImpl.java"/>
			<include name="edu/harvard/fas/rregan/requel/project/impl/ProjectTeamImpl.java"/>
			<include name="edu/harvard/fas/rregan/requel/project/impl/StakeholderImpl.java"/>
			<include name="edu/harvard/fas/rregan/requel/project/impl/StakeholderPermissionImpl.java"/>
			<include name="edu/harvard/fas/rregan/requel/project/impl/GlossaryTermImpl.java"/>
			<include name="edu/harvard/fas/rregan/requel/project/impl/AddActorPosition.java"/>
			<include name="edu/harvard/fas/rregan/requel/project/impl/AddGlossaryTermPosition.java"/>
		</schemagen>
	</target>

	<taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask">
		<classpath refid="libs.jaxb" /> 
	</taskdef>

	<target name="gen-verbnet-jars">
	    <property name="verbnet.src.dir" value="${build.dir}/verbnet-2.1/src"/>
	    <property name="verbnet.cls.dir" value="${build.dir}/verbnet-2.1/classes"/>
		<mkdir dir="${build.dir}/verbnet-2.1/src"/>
		<mkdir dir="${build.dir}/verbnet-2.1/classes"/>
		<xjc schema="src/resources/nlp/verbnet-2.1/vn_schema-3.xsd" destdir="${verbnet.src.dir}" package="edu.harvard.fas.rregan.nlp.verbnet" extension="true"/>
		<echo message="compiling to ${verbnet.cls.dir}"/>
		<javac srcdir="${verbnet.src.dir}" destdir="${verbnet.cls.dir}" debug="true" source="1.6">
			<classpath>
				<fileset dir="lib">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
		</javac>
		<jar destfile="lib/nlp/verbnet-2.1.jar" duplicate="preserve">
			<zipfileset dir="${verbnet.cls.dir}"/>
		</jar>
		<jar destfile="src/lib/nlp/verbnet-2.1-src.jar" duplicate="preserve">
			<zipfileset dir="${verbnet.src.dir}"/>
		</jar>		
	</target>

	<!-- Doxygen and graphviz must be installed on your system, see the tools folder
	-->
	<taskdef name="doxygen" classname="org.doxygen.tools.DoxygenTask" classpathref="libs.doxygen.ant" />

	<target name="gen-dev-doc" description="Generate documentation using DOxygen.">
		<property name="tmp.output.dir" value="${build.dir}/tmp/doc"/>
		<property name="doc.output.dir" value="${build.dir}/${context.name}/war/doc"/>
		<copy file="${doxygen.doxyfile}" tofile="${build.dir}/tmp/Doxyfile" overwrite="true" filtering="true">
            <filterset>
            	<filtersfile file="conf/build/build.properties"/>
            	<filtersfile file="conf/build/env-${hostname}-${username}.build.properties" />
				<filter token="subproject.name" value="${subproject.name}"/>
				<filter token="deployment.name" value="${deployment.name}"/>
				<filter token="context.name" value="${context.name}"/>
        		<filter token="output.dir" value="${tmp.output.dir}"/>
        		<filter token="src.dir" value="${basedir}/src/java"/>
        		<filter token="project.name" value="${project.name}"/>
        		<filter token="have.dot" value="${doxygen.have.dot}"/>
            </filterset>
		</copy>
		<doxygen configFilename="${build.dir}/tmp/Doxyfile" verbose="true"/>
		<mkdir dir="${doc.output.dir}"/>
		<tar destfile="doc/devdocs.tgz" longfile="gnu" compression="gzip">
			<tarfileset dir="${tmp.output.dir}" mode="755" username="ant" group="ant">
				<include name="**"/>
		  	</tarfileset>
		</tar>
		<delete dir="${build.dir}/tmp/doc" failonerror="false"/>
	</target>
</project>
