/*
 * $Id$
 * Copyright 2008, 2009 Ron Regan Jr. All Rights Reserved.
 * This file is part of Requel - the Collaborative Requirments
 * Elicitation System.
 *
 * Requel is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Requel is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Requel. If not, see <http://www.gnu.org/licenses/>.
 *
 */
package edu.harvard.fas.rregan.nlp.ui;

import nextapp.echo2.app.Label;
import nextapp.echo2.app.event.ActionEvent;

import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Component;

import echopointng.tree.MutableTreeNode;
import net.sf.echopm.navigation.WorkflowDisposition;
import net.sf.echopm.navigation.event.EventDispatcher;
import net.sf.echopm.navigation.event.NavigationEvent;
import net.sf.echopm.navigation.event.OpenPanelEvent;
import net.sf.echopm.navigation.event.UpdateEntityEvent;
import net.sf.echopm.navigation.tree.AbstractNavigatorTreeNodeFactory;
import net.sf.echopm.navigation.tree.NavigatorTree;
import net.sf.echopm.navigation.tree.NavigatorTreeNode;
import net.sf.echopm.navigation.tree.NavigatorTreeNodeUpdateListener;
import net.sf.echopm.panel.PanelActionType;

/**
 * @author ron
 */
@Component("nlpNavigatorTreeNodeFactory")
@Scope("singleton")
public class NLPNavigatorTreeNodeFactory extends AbstractNavigatorTreeNodeFactory {

	/**
	 * The property name to use to control the label on the parser node
	 * generated by the factory.
	 */
	public final static String PROP_PARSER_NODE_LABEL = "ParserNodeLabel";

	/**
	 * @param eventDispatcher
	 */
	public NLPNavigatorTreeNodeFactory() {
		super(NLPNavigatorTreeNodeFactory.class.getName(), NLPNavigatorPanel.class);
	}

	/**
	 * @see net.sf.echopm.navigation.tree.NavigatorTreeNodeFactory#createTreeNode(net.sf.echopm.navigation.tree.NavigatorTree,
	 *      java.lang.Object)
	 */
	public MutableTreeNode createTreeNode(EventDispatcher eventDispatcher, NavigatorTree tree,
			Object object) {

		NavigationEvent openParserPanelEvent = new OpenPanelEvent(tree, PanelActionType.Editor,
				null, null, NLPPanelNames.PARSER_PANEL_NAME, WorkflowDisposition.NewFlow);

		String sparserPanelNodeLabel = getResourceBundleHelper(tree.getLocale()).getString(
				PROP_PARSER_NODE_LABEL, "Parser");

		NavigatorTreeNode parserPanelTreeNode = new NavigatorTreeNode(eventDispatcher, null,
				new Label(sparserPanelNodeLabel), openParserPanelEvent);

		return parserPanelTreeNode;
	}

	private static class UpdateListener implements NavigatorTreeNodeUpdateListener {
		static final long serialVersionUID = 0L;

		private final NavigatorTreeNode projectTreeNode;

		private UpdateListener(NavigatorTreeNode projectTreeNode) {
			this.projectTreeNode = projectTreeNode;
		}

		@Override
		public void actionPerformed(ActionEvent e) {
			if (e instanceof UpdateEntityEvent) {
			}
		}
	}
}
