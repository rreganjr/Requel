/*
 * $Id$
 * Copyright 2008, 2009 Ron Regan Jr. All Rights Reserved.
 * This file is part of Requel - the Collaborative Requirements
 * Elicitation System.
 *
 * Requel is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Requel is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Requel. If not, see <http://www.gnu.org/licenses/>.
 *
 */
package com.rreganjr.requel.user;

import java.util.Comparator;
import java.util.Set;

import com.rreganjr.requel.EntityValidationException;
import com.rreganjr.requel.OrganizedEntity;
import com.rreganjr.requel.user.exception.NoSuchRoleForUserException;

/**
 * A user of the system.
 * 
 * @author ron
 */
public interface User extends Comparable<User>, OrganizedEntity {

	/**
	 * The users real name userful for identifying the user in documents or
	 * reports generated by the system.
	 * 
	 * @return - the user's name
	 */
	public String getName();

	/**
	 * set the user's name.
	 * 
	 * @param name -
	 *            the new name of the user.
	 */
	public void setName(String name);

	/**
	 * A system-wide unique text identifier for the user.
	 * 
	 * @return - the user's username TODO: what makes a valid username? TODO:
	 *         can a username be changed?
	 */
	public String getUsername();

	/**
	 * Set a new username for this user<br>
	 * NOTE: if the new user name is in use by someone else, saving the user
	 * will fail.
	 * 
	 * @param username -
	 *            new username value.
	 */
	public void setUsername(String username);

	/**
	 * if the user has a name then return the form "<name> [ <username> ]"
	 * otherwise return "<username>"
	 * 
	 * @return The user's name (if it exists) plus the username
	 */
	public String getDescriptiveName();
	
	/**
	 * Reset the user's password to the supplied plain text string.
	 * 
	 * @param password -
	 *            the user's new password as plain text.
	 * @throws EntityValidationException
	 *             if the supplied string doesn't meet the password criteria
	 *             TODO: what is the password criteria?
	 */
	public void resetPassword(String password) throws EntityValidationException;

	/**
	 * Return true if the supplied plain text password matches the user's
	 * password.
	 * 
	 * @param password -
	 *            a plain text string to test as the user's password.
	 * @return true if the supplied plain text password matches the user's
	 *         password.
	 */
	public boolean isPassword(String password);

	/**
	 * The user's email address. The system will use this for sending
	 * communcations to the user and may be included in generated documents or
	 * presented to other users of the system for contacting this user.
	 * 
	 * @return the user's email address
	 */
	public String getEmailAddress();

	/**
	 * Set the user's email address.
	 * 
	 * @param emailAddress -
	 *            the email address to assign
	 */
	public void setEmailAddress(String emailAddress);

	/**
	 * The user's primary contat number. This may be included in generated
	 * documents or presented to other users of the system for contacting this
	 * user.
	 * 
	 * @return
	 */
	public String getPhoneNumber();

	/**
	 * Set the user's phone number.
	 * 
	 * @param phoneNumber -
	 *            the phone number to assign
	 */
	public void setPhoneNumber(String phoneNumber);

		/**
         * The system administrator can create accounts intended to be shared by
         * multiple users conceivably for reading the projects status. The
         * administrator can lock these accounts so they can not be edited by the
         * user.
         *
         * @return true if the account is editable by the user, false if the account
         *         can only be edited by the administrator
         */
	public boolean isEditable();

	/**
	 * @param edited
	 */
	public void setEditable(boolean edited);

	/**
	 * The system level roles that the user has permission to use, such as
	 * project user, domain administrator or system administrator. The role may
	 * includ role specific data for this user, such as project information.
	 * 
	 * @return
	 */
	public Set<UserRole> getUserRoles();

	/**
	 * Return the role object for the specified type. A user can only have one
	 * role per type.
	 * 
	 * @param <T> -
	 *            the class of user role being retrieved
	 * @param roleType -
	 *            The type (class) of the role being requested.
	 * @return the role object for the specified type
	 * @throws NoSuchRoleForUserException -
	 *             if the user doesn't have a role for the supplied type
	 */
	public <T extends UserRole> T getRoleForType(Class<T> roleType)
			throws NoSuchRoleForUserException;

	/**
	 * Return true if the user is assigned to the supplied role type.
	 * 
	 * @param roleType -
	 *            The UserRoleType of the role being tested.
	 * @return - true if the user is assigned to the supplied role type.
	 */
	public boolean hasRole(Class<? extends UserRole> roleType);

	/**
	 * grant the specified role to the user.
	 * 
	 * @param userRoleType -
	 *            the type of role to grant
	 */
	public void grantRole(Class<? extends UserRole> userRoleType);

	/**
	 * revoke the specified role from the user.
	 * 
	 * @param userRoleType -
	 *            the type of role to revoke
	 */
	public void revokeRole(Class<? extends UserRole> userRoleType);

	/**
	 * Test if a user is equal to another user by internal id. This is needed to
	 * figure out if a user object is equal to another when the username
	 * changes.
	 * 
	 * @param other
	 * @return
	 */
	public boolean equalsById(User other);

	/**
	 * a Comparator for comparing two users, ordered by username
	 */
	public static Comparator<User> UserComparator = new Comparator<User>() {
		public int compare(User o1, User o2) {
			// this catches the case of when a user's username has changed
			// TODO: if the new username sorts before the original then the
			// username comparator may terminate the sorting before the actual
			// user is found.
			if (o1.equals(o2)) {
				return 0;
			}
			return UsernameComparator.compare(o1.getUsername(), o2.getUsername());
		}
	};

	/**
	 * Compare two username strings.
	 */
	public static Comparator<String> UsernameComparator = new Comparator<String>() {
		public int compare(String o1, String o2) {
			return o1.toLowerCase().compareTo(o2.toLowerCase());
		}
	};

}
