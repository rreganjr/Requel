<?xml version="1.0" encoding="UTF-8"?>
<!--
  - Spring config using the
  -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.5.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">

	<aop:aspectj-autoproxy/>
	
	<!-- DomainObjectWrapper configuration -->
	<!--
	 * Entity types may be configured with a timeout period to determine if
	 * an entity needs to be reloaded from the db. This allows objects that
	 * are mostly read-only to have a long period so that the object isn't
	 * read from the database frequently. Entities that are likely to change
	 * frequently should have a second or less. a value of zero means the
	 * entity is always read from the database on each method access.
	 * use java.lang.Object to set a default time out for all classes not
	 * defined else where, otherwise the default will be 1 second.
	 -->
	<util:map id="staleTimeoutMap" key-type="java.lang.Class" value-type="java.lang.Integer">
  		<entry><key><value type="java.lang.Class">edu.harvard.fas.rregan.nlp.dictionary.Category</value></key><value>300000</value></entry>
  		<entry><key><value type="java.lang.Class">edu.harvard.fas.rregan.nlp.dictionary.Lexlinkref</value></key><value>300000</value></entry>
  		<entry><key><value type="java.lang.Class">edu.harvard.fas.rregan.nlp.dictionary.LexlinkrefId</value></key><value>300000</value></entry>
  		<entry><key><value type="java.lang.Class">edu.harvard.fas.rregan.nlp.dictionary.Linkdef</value></key><value>300000</value></entry>
  		<entry><key><value type="java.lang.Class">edu.harvard.fas.rregan.nlp.dictionary.Morphdef</value></key><value>300000</value></entry>
  		<entry><key><value type="java.lang.Class">edu.harvard.fas.rregan.nlp.dictionary.Morphref</value></key><value>300000</value></entry>
  		<entry><key><value type="java.lang.Class">edu.harvard.fas.rregan.nlp.dictionary.MorphrefId</value></key><value>300000</value></entry>
  		<entry><key><value type="java.lang.Class">edu.harvard.fas.rregan.nlp.dictionary.SemcorFile</value></key><value>300000</value></entry>
  		<entry><key><value type="java.lang.Class">edu.harvard.fas.rregan.nlp.dictionary.SemcorSentence</value></key><value>300000</value></entry>
  		<entry><key><value type="java.lang.Class">edu.harvard.fas.rregan.nlp.dictionary.SemcorSentenceWord</value></key><value>300000</value></entry>
  		<entry><key><value type="java.lang.Class">edu.harvard.fas.rregan.nlp.dictionary.Semlinkref</value></key><value>300000</value></entry>
  		<entry><key><value type="java.lang.Class">edu.harvard.fas.rregan.nlp.dictionary.SemlinkrefId</value></key><value>300000</value></entry>
  		<entry><key><value type="java.lang.Class">edu.harvard.fas.rregan.nlp.dictionary.Sense</value></key><value>300000</value></entry>
  		<entry><key><value type="java.lang.Class">edu.harvard.fas.rregan.nlp.dictionary.SenseId</value></key><value>300000</value></entry>
  		<entry><key><value type="java.lang.Class">edu.harvard.fas.rregan.nlp.dictionary.Synset</value></key><value>300000</value></entry>
  		<entry><key><value type="java.lang.Class">edu.harvard.fas.rregan.nlp.dictionary.SynsetDefinitionWord</value></key><value>300000</value></entry>
  		<entry><key><value type="java.lang.Class">edu.harvard.fas.rregan.nlp.dictionary.VerbNetClass</value></key><value>300000</value></entry>
  		<entry><key><value type="java.lang.Class">edu.harvard.fas.rregan.nlp.dictionary.VerbNetFrame</value></key><value>300000</value></entry>
  		<entry><key><value type="java.lang.Class">edu.harvard.fas.rregan.nlp.dictionary.VerbNetFrameRef</value></key><value>300000</value></entry>
  		<entry><key><value type="java.lang.Class">edu.harvard.fas.rregan.nlp.dictionary.Word</value></key><value>300000</value></entry>
  		<entry><key><value type="java.lang.Class">java.lang.Object</value></key><value>1000</value></entry>
	</util:map> 
	
	<bean id="proxyFactoryBean" class="org.springframework.aop.framework.ProxyFactoryBean"/>
	
	<!-- The Advice for tracing -->
	<bean id="traceInterceptor" class="org.springframework.aop.interceptor.SimpleTraceInterceptor"/>
	
	<aop:config>
		<!-- using the full class name with the '+' got this to work -->
		<aop:pointcut id="repositoryMethods" expression="execution(* edu.harvard.fas.rregan.repository.jpa.AbstractJpaRepository+.*(..))"/>
		<aop:advisor id="traceInterceptorAdvisor" advice-ref="traceInterceptor" pointcut-ref="repositoryMethods"/>
 	</aop:config>

 	<!-- Activates @Transactional -->
	<tx:annotation-driven transaction-manager="transactionManager"/>	
    
	<!-- Configurer for properties in beans of the form ${xxx} (replaces with properties from files) -->
	<context:property-placeholder location="WEB-INF/classes/db.properties"/>


<!-- generic driver, ok for testing, but creates a separate db connection every time
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${db.driver}"/>
        <property name="url" value="${db.baseUrl}${db.server}:${db.port}/${db.name}${db.urlParams}"/>
        <property name="username" value="${db.username}"/>
        <property name="password" value="${db.password}"/>
    </bean>
-->
<!-- for DBCP
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${db.driver}"/>
		<property name="url" value="${db.baseUrl}${db.server}:${db.port}/${db.name}${db.urlParams}"/>
		<property name="username" value="${db.username}"/>
		<property name="password" value="${db.password}"/>
	</bean>
 -->

<!-- C3P0
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${db.driver}"/>
		<property name="jdbcUrl" value="${db.baseUrl}${db.server}:${db.port}/${db.name}${db.urlParams}" />
		<property name="user" value="${db.username}" />
		<property name="password" value="${db.password}" />
		<property name="maxPoolSize" value="5" />
		<property name="minPoolSize" value="1" />
		<property name="maxIdleTime" value="5000" />
   </bean>  
 -->
	<bean id="dataSource" class="org.logicalcobwebs.proxool.ProxoolDataSource">
		<property name="alias" value="pool1" />
		<property name="driver" value="${db.driver}" />
		<property name="driverUrl" value="${db.baseUrl}${db.server}:${db.port}/${db.name}${db.urlParams}" />
		<property name="user" value="${db.username}" />
		<property name="password" value="${db.password}" />
		<property name="maximumConnectionCount" value="10" />
		<property name="maximumActiveTime" value="3600000" />
		<property name="houseKeepingTestSql" value="select CURRENT_DATE" />
	</bean>

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
	  <property name="dataSource" ref="dataSource"/> 
	</bean>

	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
 		<property name="dataSource"><ref local="dataSource"/></property>
		<property name="persistenceUnitName" value="${db.jpa.persistenceUnitName}" />
		<property name="persistenceXmlLocation" value="classpath*:/META-INF/persistence.xml"/>
		<property name="jpaDialect"><bean class="${db.jpa.dialect}"/></property>
 		<property name="jpaVendorAdapter">
		 	<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		 		<property name="databasePlatform" value="${db.hibernate.dialect}"/>
				<property name="showSql" value="${db.hibernate.showSql}" />
				<property name="generateDdl" value="${db.hibernate.generateDdl}" />
		    </bean>
 		</property>
		<!-- NOTE: don't use SimpleLoadTimeWeaver with hibernate --> 		
	</bean>

	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory"><ref local="entityManagerFactory"/></property>
	</bean>

	<!--
		This scans for all spring annotated files except for files related to the
		simple repository. 
	 -->
	<context:component-scan base-package="edu.harvard.fas.rregan">
		<context:exclude-filter type="regex" expression=".*Simple.*Repository"/>
	</context:component-scan>	
</beans>
